#!SBC SCRIPT

####### Macro Define Flags ######### 
# NAT_FLAG; SIP_PING_FLAG
# UDP_FLAG;TLS_FLAG;WS_FLAG;WSS_FLAG;
# UDP_DT;  TLS_DT;  WS_DT;  WSS_DT;
# CALLIN_FLAG; CALLOUT_FLAG

####### Global Parameters #########
# log_level: -3:Alert;-2:Critical;-1:Error;1:Warning;2:Notice;3:Info;4:Debug;
log_level=4
log_facility=LOG_LOCAL4
log_stderror=no
log_name="sbc"
debug_mode=no
auto_aliases=no
server_signature=no
server_header="Server: hisan-sbc"
user_agent_header="User-Agent: hisan-sbc"
children=4

####### Modules Section ########
mpath="/usr/hisan/sbc/lib64/"

loadmodule "cfgutils.so"
loadmodule "signaling.so"
loadmodule "sipmsgops.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "sl.so"
loadmodule "maxfwd.so"
loadmodule "mi_fifo.so"
loadmodule "uri.so"
loadmodule "uac.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "uac_auth.so"
loadmodule "uac_registrant.so"
loadmodule "path.so"
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
loadmodule "mid_registrar.so"
loadmodule "rtpengine.so"
loadmodule "db_mysql.so" 
loadmodule "db_sqlite.so" 
loadmodule "db_text.so" 
loadmodule "avpops.so"
loadmodule "dialog.so"
loadmodule "dialplan.so"
loadmodule "domain.so"
loadmodule "permissions.so"
loadmodule "nathelper.so"
loadmodule "topology_hiding.so"
loadmodule "event_route.so"
loadmodule "dispatcher.so"
loadmodule "load_balancer.so"
loadmodule "drouting.so"
loadmodule "tls_mgm.so"
loadmodule "proto_tls.so"
loadmodule "proto_wss.so"
loadmodule "proto_ws.so"
loadmodule "httpd.so"
loadmodule "mi_json.so"
loadmodule "proto_hep.so"
loadmodule "siptrace.so"

####### Modules Parameters ########
#### Cfgutils Module

#### Transaction Module
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
modparam("rr", "append_fromtag", 1) # Needed by UAC

#### FIFO Management Interface
modparam("mi_fifo", "fifo_name", "/usr/hisan/sbc/run/sbc_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
modparam("uri", "use_uri_table", 0)

#### UAC module
modparam("uac","restore_mode","manual")

#### Registrar module
modparam("registrar", "max_contacts", 10)

#### Uac_registrant module
modparam("uac_registrant", "hash_size", 1)
modparam("uac_registrant", "timer_interval", 120)

#### Path module
modparam("path", "use_received", 1)

#### User Location module
modparam("usrloc", "use_domain", 0)
modparam("usrloc", "nat_bflag", "NAT_FLAG")
modparam("usrloc", "timer_interval", 30)
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back") # single-instance-no-db

#### Mid Registrar module
modparam("mid_registrar", "mode", 2) # 0:mirror;1:ct;2:AoR 
modparam("mid_registrar", "outgoing_expires", 600)
modparam("mid_registrar", "received_avp", "$avp(received)")
modparam("mid_registrar", "min_expires", 60)
modparam("mid_registrar", "max_expires", 600)

#### Dialog module
modparam("dialog", "default_timeout", 14400)  # 4 hours timeout
modparam("dialog", "db_mode", 2)              # 0:no-db;1:realtime;2:delayed;3:shutdown  
modparam("dialog", "profiles_no_value", "callin;callout;calls;")
modparam("dialog", "profiles_with_value", "caller")
modparam("dialog", "db_update_period", 30)    # change me
modparam("dialog", "dlg_match_mode", 1)       # 0:DID_ONLY;1:DID_FALLBACK;2:DID_NONE; 

#### Topology Hiding
modparam("topology_hiding", "force_dialog", 1)

#### Dialplan module

#### Domain module
modparam("domain", "db_mode", 1) # 0:Non-Caching;1:Caching  

#### Permissions(ACL) module

#### RTPengine module
modparam("rtpengine", "rtpengine_disable_tout", 60)
modparam("rtpengine", "rtpengine_tout", 3)
modparam("rtpengine", "rtpengine_retr", 5)

#### NAT HELPER
modparam("nathelper", "sipping_method", "OPTIONS")
modparam("nathelper", "sipping_from", "sip:ping@hisancc.com")
modparam("nathelper", "natping_interval", 60)    # change me
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "received_avp", "$avp(received)")
modparam("nathelper", "sipping_ignore_rpl_codes", "408, 480, 404")

#### Dispatcher module
modparam("dispatcher", "dst_avp", "$avp(dsdst)")
modparam("dispatcher", "grp_avp", "$avp(dsgrp)")
modparam("dispatcher", "cnt_avp", "$avp(dscnt)")
modparam("dispatcher", "ds_ping_method","OPTIONS")
modparam("dispatcher", "ds_ping_from","sip:disp@hisancc.com")
modparam("dispatcher", "ds_probing_mode",1)        # change me
modparam("dispatcher", "ds_ping_interval", 30)
modparam("dispatcher", "ds_probing_threshhold", 2)
modparam("dispatcher", "options_reply_codes", "501, 403, 404, 481")

#### Load Balancer module
modparam("load_balancer", "probing_method", "OPTIONS")
modparam("load_balancer", "probing_verbose", 1)
modparam("load_balancer", "probing_from", "sip:lb@hisancc.com")
modparam("load_balancer", "probing_interval", 60)   # change me
modparam("load_balancer", "probing_reply_codes", "501, 403, 404, 481")

#### Dynamic routing module
modparam("drouting", "probing_method", "OPTIONS")
modparam("drouting", "probing_from", "sip:dr@hisancc.com")
modparam("drouting", "probing_interval", 60)  # change me
modparam("drouting", "probing_reply_codes", "501, 403, 404, 481")
modparam("drouting", "use_domain", 0)
modparam("drouting", "use_partitions", 0)

#### TLS MGM module
modparam("tls_mgm", "verify_cert", "0")
modparam("tls_mgm", "require_cert", "0")
modparam("tls_mgm", "tls_method", "TLSv1")  # TLSv1 Or SSLv23 
modparam("tls_mgm", "ciphers_list","AES128-SHA256:AES256-SHA")  # change me

#modparam("tls_mgm","server_domain","sv_dom=<your-ip-address>:<port>")
modparam("tls_mgm", "certificate", "/usr/hisan/sbc/cfg/tls/server.crt")
modparam("tls_mgm", "private_key", "/usr/hisan/sbc/cfg/tls/server.key")
modparam("tls_mgm", "ca_list",     "/usr/hisan/sbc/cfg/tls/server.pem")

#### Proto WSS And WS module
modparam("proto_ws", "ws_max_msg_chunks", 8)
modparam("proto_ws", "ws_send_timeout", 300)
modparam("proto_wss", "wss_max_msg_chunks", 8)
modparam("proto_wss", "wss_handshake_timeout", 300)

#### httpd module
modparam("httpd", "buf_size", 58388608) # 58388608=8M
modparam("httpd", "post_buf_size", 40960)

#### mi_json module
modparam("mi_json", "mi_json_root", "sbc_mi_json")

#### proto_hep module
#modparam("proto_hep", "hep_id", "[hepsbc] x.x.x.x:9060; transport=udp; version=3")
modparam("proto_hep", "homer5_on", 1)
modparam("proto_hep", "homer5_delim", ":")
modparam("proto_hep", "hep_send_timeout", 200)
modparam("proto_hep", "hep_async", 1)

#### siptrace module
modparam("siptrace", "trace_on", 0)  # 0:off;1:on;
modparam("siptrace", "trace_id", "[tidsbc] uri=hep:hepsbc")

### INCLUDED CUSTOM FILES
include_file "/usr/hisan/sbc/cfg/sbc_custom.cfg"

####### Routing Logic ########
route{
		# print request logs
		if (is_method("INVITE")) {
		  xlog("L_INFO", "<sc>: $rm $ru, $fU to $tU, cid:$ci");
		  if(!has_totag()) {
		  	sip_trace("tidsbc", "d", "sip", "");
		  }
		}
				
		if (is_method("REGISTER")) {
		  xlog("L_INFO", "<sc>: $rm $ru, $fU from $si:$sp, expires $(hdr(Expires)), cid:$ci");	
		  sip_trace("tidsbc", "d", "sip", "");
		}
		
		# per request sanity checks
		route(CHECK_SANITY);
		
		# nat detection
		route(NAT_DETECT);
		
		# handle requests within sip dialogs
		if (has_totag()) {
		  route(WITHINDLG);
		}
		
		# acl check
		route(CHECK_ACL);
		
		# protocol check
		route(CHECK_PROTO);

		# absorb retransmissions, but do not create transaction
    t_check_trans();

		# first we check if is method register to handle it correctly
    if (is_method("REGISTER")) { 
      route(REGISTRAR);
      exit;
    }
    
    # preloaded route checking
    if (loose_route()) {
      xlog("L_ERR", "<sc>: attempt to route with preloaded route's [$fu/$tu/$ru]");
      if (!is_method("ACK"))
        send_reply("403","Preload route denied");
      exit;
    }
		
    # record routing:
		remove_hf("Route");
    if (!is_method("REGISTER|MESSAGE")) {
      record_route();
		}
		
		# some sanity checks
    if ($rU==NULL) {
      # request with no Username in RURI
      send_reply("484","Address Incomplete");
      exit;
    }
    
    # First Requests (not in dialog)
    route(INITIALDLG);

    exit;
}

# request sanity checks
route[CHECK_SANITY] {
		if (!mf_process_maxfwd_header("10")) {
			sl_send_reply("483","Too Many Hops");
			exit;
		}

		# OPTIONS processing
		#if (method == "OPTIONS" && is_from_gw()) {
		if (is_method("OPTIONS")) {
			force_rport();
			sl_send_reply("200", "OK");
			exit;
		}
   
		# not support method
		if (is_method("SUBSCRIBE") || is_method("PUBLISH") ) {
			sl_send_reply("405", "Method Not Allowed");
			exit;
		}
		
		# CANCEL processing
		if (is_method("CANCEL")) {
			if (t_check_trans()) {
				t_relay();
			}
			exit;
		}
}

route[CHECK_ACL] {
		# check acl
		if (!check_address("0","$si","$sp","$proto") ) {
			xlog("L_ERR", "<sc>: address forbidden $si:$sp");
			# sl_send_reply("403", "Forbidden");			    # not send 403 for address silence mode
			exit;
		}
		
		# check domain
		if (!is_domain_local("$rd") && !is_domain_local("$fd") ) {
			xlog("L_ERR", "<sc>: domain not found $si:$sp, $rd or $fd");
			# sl_send_reply("404", "Domain Not Found");   # not send 403 for domain silence mode
			exit;
		}
}

route[CHECK_PROTO] {
		if( $proto == "TLS" ) {
			setflag( TLS_FLAG );
		} else if( $proto == "WS" ) {
			setflag( WS_FLAG );
		}	else if( $proto == "WSS" ) {
			setflag( WSS_FLAG );
		} else {
			setflag( UDP_FLAG );
		}
}

route[NAT_DETECT] {
		# and apply contact fixing, param: 127 = 1111111 (activate all check)
		force_rport();
		if (nat_uac_test("127")) { 
			if (is_method("REGISTER")) {
				fix_nated_register();
				add_rcv_param();
				setbflag(NAT_FLAG);
			} else {
				fix_nated_contact();
				setflag(NAT_FLAG);
			}
			#xlog("L_INFO", "<sc>: nat detected, set nat flag ok, $rm $ru ");
		}
}

route[WITHINDLG] {	
		xlog("L_INFO", "<sc>: in-dialog $rm from $si:$sp, $fU to $tU cid:$ci");
    # topology hiding dlg
		if (topology_hiding_match()) {				
			route(RELAY);
			exit;
		}
		 
		# sequential requests within a dialog should
		# take the path determined by record-routing
		if (loose_route()) {			
			if (is_method("BYE")) {
				# do accunting, even if the transaction fails
				#do_accounting("log","failed");
			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			xlog("L_INFO", "<sc>: in-dialog loose-routing $rm");
			route(RELAY);
			
		} else {			
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					xlog("L_INFO", "<sc>: ACK with matching transaction $rm");
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					xlog("L_ERR", "<sc>: ACK without matching transaction $rm, cid:$ci");
					exit;
				}
			}
			
			xlog("L_ERR", "<sc>: in-dialog loose-routing 404 for $rm, cid:$ci");
			sl_send_reply("404","Not here");
		}
		
		exit;
}

#----------------------------------------------------------------------
# relay route
#----------------------------------------------------------------------
route[RELAY] {
		# rtpengine route
		route(RTPENGINE_MANAGE);
		
		# add nat=yes;
		if (isflagset(NAT_FLAG)) {
			add_rr_param(";nat=yes");
		}
		
    # for INVITEs enable some additional helper routes
    if (is_method("INVITE")) {
			t_on_reply("MANAGE_REPLY");
			t_on_branch("MANAGE_BRANCH");
			t_on_failure("MANAGE_FAILURE");
    }
		
		if (is_method("BYE")) {
			t_on_branch("MANAGE_BRANCH");
    }
		
		if (is_method("UPDATE")) {
			t_on_reply("MANAGE_REPLY");
			t_on_branch("MANAGE_BRANCH");
    }
    
    # rtpengine delete
    if (is_method("BYE|CANCEL")) {
    	rtpengine_delete();
    }
   
    if (!t_relay()) {
      send_reply("500","Server Error");
    }
    exit;
}

branch_route[MANAGE_BRANCH] {
    xlog("L_INFO", "<sc>: newbranch $fU to $tU, r-uri $ru, cid:$ci");
}

onreply_route[MANAGE_REPLY] {
    xlog("L_INFO", "<sc>: reply $rs $rr from $si:$sp, $fU to $tU, cid:$ci");
   
   	# rtpengine route
   	if ( has_body("application/sdp") ) {
	   	setflag( REPLY_STAT_FLAG );
			route(RTPENGINE_MANAGE);
		}
    
    # check nat flag and fix nat contact
		if (isflagset(NAT_FLAG)) {
			fix_nated_contact();
		}
}

failure_route[MANAGE_FAILURE] {
    xlog("L_INFO", "<sc>: failure from $si:$sp, $fU to $tU, r-uri $ru, cid:$ci");
    
    # rtpengine delete
    rtpengine_delete();
}

#----------------------------------------------------------------------
# rtpengine route
#----------------------------------------------------------------------
route[RTPENGINE_MANAGE] {
		if( $shv(rtpops_prefix) == "" || !has_body("application/sdp") ) {
			return;
		}
			
		if( ($Ri == $shv(lan_addr)) && ( $Rp == $shv(lan_port_reg) || $Rp == $shv(lan_port_trunk)) ) {
			if( $shv(wan_addr_adv) != $shv(wan_addr) ) {
				# for network bridge mode: in-iface=internal out-iface=external
				$var(rtpops) = $shv(rtpops_prefix) + " media-address=" + $shv(wan_addr_adv); 
			} else {
				$var(rtpops) = $shv(rtpops_prefix); 
			}				

			if( isflagset(TLS_FLAG) ) {          # invite from tls, reply to tls
				$var(rtpops) = $var(rtpops) + " ICE=remove rtcp-mux-demux RTP/AVP";
			} else if( isflagset(WS_FLAG) ) {    # invite from ws, reply to ws
				$var(rtpops) = $var(rtpops) + " ICE=force rtcp-mux-offer SDES-off DTLS=passive UDP/TLS/RTP/SAVPF";
			} else if( isflagset(WSS_FLAG) ) {   # invite from wss, reply to wss
				$var(rtpops) = $var(rtpops) + " ICE=force rtcp-mux-offer SDES-off DTLS=passive UDP/TLS/RTP/SAVPF";
			} else {                           
				if( isbflagset(TLS_DT) ) {         # invite from fs to tls device
					$var(rtpops) = $var(rtpops) + " ICE=remove rtcp-mux-demux RTP/AVP";
				} else if( isbflagset(WS_DT) ) {   # invite from fs to ws device
					$var(rtpops) = $var(rtpops) + " ICE=force rtcp-mux-offer SDES-off DTLS=passive UDP/TLS/RTP/SAVPF";
				} else if( isbflagset(WSS_DT) ) {  # invite from fs to wss device
					$var(rtpops) = $var(rtpops) + " ICE=force rtcp-mux-offer SDES-off DTLS=passive UDP/TLS/RTP/SAVPF";
				} else {                           # invite from fs to sip device
					$var(rtpops) = $var(rtpops) + " ICE=remove rtcp-mux-demux RTP/AVP";
				}
			}
		}	else {		
			if( $shv(wan_addr_adv) != $shv(wan_addr) ) {     # tls.ws.wss.sip to sip 
				$var(rtpops) = $shv(rtpops_prefix) + " ICE=remove rtcp-mux-demux RTP/AVP" + " media-address=" + $shv(lan_addr_media);   
			} else {
				$var(rtpops) = $shv(rtpops_prefix) + " ICE=remove rtcp-mux-demux RTP/AVP";
			}
		}
	
		$var(rtpcmd) = "answer";  # log cmd define
		
		if( !isflagset(REPLY_STAT_FLAG) ) {
			if( is_method("INVITE") ) {
				$var(rtpcmd) = "offer";
				rtpengine_offer("$var(rtpops)");	
			} else if( is_method("ACK") || is_method("PRACK") ) {
				rtpengine_answer("$var(rtpops)");				
			} else {
				rtpengine_answer("$var(rtpops)");
			}
		} else {
			if( $rs=="183" || $rs=="200" ) {
				rtpengine_answer("$var(rtpops)");
			} else {
				rtpengine_answer("$var(rtpops)");
			}
		}
		xlog("L_INFO", "<sc>: rtpmg: $var(rtpcmd), $fU to $tU cid:$ci"); 
		xlog("L_INFO", "<sc>: rtpmg: $var(rtpops)"); 
}

#----------------------------------------------------------------------
# registrar route
#----------------------------------------------------------------------
route[REGISTRAR] {
		# if we fail to add the path header then dont let it, register because it will cause issues later...
		#if (!add_path_received()) {
		#  xlog("L_ERR", "<sc>: $fU unable to add path");
		#  sl_send_reply("503", "Internal path befuddlement");
		#  cache_remove("local", "$ci");
		#  exit;
		#}
		
		# get destination freeswitch, dpid is 0, ex: attrs = xx.xx.xx.xx:5060
		if( dp_translate("0", "$fU/$avp(dest)", "$var(attrs)") || 
		    dp_translate("0", "$rd/$avp(dest)", "$var(attrs)") ||
		    dp_translate("0", "$fd/$avp(dest)", "$var(attrs)") ) {
			xlog("L_INFO", "<sc>: dialplan lookup user $fU with attrs: $var(attrs)");
		} else {
			xlog("L_ERR", "<sc>: dialplan lookup failed for user $fU, addr $si, reply 404");
			send_reply("404","Not here");
			exit;
		}
		
		# set bflag sip ping 
		if( isbflagset(NAT_FLAG) ) {
			setbflag(SIP_PING_FLAG);         # change me
		}
		
		# set device type
		if( isflagset(TLS_FLAG) ) {
			setbflag(TLS_DT);
		} else if( isflagset(WS_FLAG) ) {
			setbflag(WS_DT);
		} else if( isflagset(WSS_FLAG) ) {
			setbflag(WSS_DT);
		} else {
			setbflag(UDP_DT);
		}
			
		# midregistrar 
    mid_registrar_save("location");
    switch ($retcode) {
			case 1:
				xlog("L_INFO", "<sc>: forwarding registrar to freeswitch $var(attrs) user $fU");
				$fs = "udp:" + $shv(lan_addr) + ":" + $shv(lan_port_reg); 
				$ru = "sip:" + $var(attrs);
				uac_replace_from("$fU", "sip:$fU@$var(attrs)");
				uac_replace_to("$tU", "sip:$tU@$var(attrs)");
				t_relay();
				break;
			case 2:
				xlog("L_INFO", "<sc>: success registrar, user $fU");
				break;
			default:
				xlog("L_ERR", "<sc>: failed to save registrar, user $fU");
    }
    exit;
}

#----------------------------------------------------------------------
# invite route
#----------------------------------------------------------------------
route[PARSE_ATTRS] {	
		if( $var(attrs) == "" ) {
			return;
		}
		
		$var(tmp) = ':';
		$var(pos1) = $(var(attrs){s.index, $var(tmp)});
		
		if( $var(pos1) < 0 ) {
			t_reply("500", "Server Error");
			exit;
		}
		
		# get dispatcher group-id, ex: disp:1
		$var(pos2) = $var(pos1) + 1;
		$var(dsflag) = $(var(attrs){s.substr,0,$var(pos1)});
		$var(dsgrp)  = $(var(attrs){s.substr,$var(pos2),0});
		xlog("L_INFO", "<sc>: parse attrs: dsflag $var(dsflag), dsgrp $var(dsgrp)");
}

route[INITIALDLG] { 
	  xlog("L_INFO", "<sc>: init-dialog $rm from $si:$sp, recvaddr $Ri:$Rp, cid:$ci");
	  
	 	#$var(py) = python_exec("handler", "INITIALDLG"); # parameters 2 must const, not support variable
		
  	# create dialog with timeout
		if ( !create_dialog("B") ) {
			send_reply("500","Server Error");
			exit;
		}
		
		set_dlg_profile("calls");
		
		# check within limit
		get_profile_size("calls",,"$var(calls)");
		get_profile_size("callin",,"$var(callin)");
		get_profile_size("callout",,"$var(callout)");
		#xlog("L_INFO", "<sc>: init-dialog calls: $var(calls) callin: $var(callin) callout:$var(callout)");
	
		if( $var(calls) > $shv(max_calls) )
		{	
			xlog("L_ERR", "<sc>: init-dialog number of calls $var(calls) > $shv(max_calls)");
			send_reply("487", "Request Terminated: limit exceeded");
			exit;
		}
		
		# topology hiding
    if (is_method("INVITE")) {
			topology_hiding("U");
    }

		# request from user to freeswitch, support: sip.tls.ws.wss users
		if( ($Ri == $shv(wan_addr)) && 
		    ($Rp == $shv(wan_port_reg) || $Rp == $shv(wan_tls_port_reg) || $Rp == $shv(wan_ws_port_reg) || $Rp == $shv(wan_wss_port_reg) ) ) {
		  xlog("L_INFO", "<sc>: init-dialog from user, $fU to $tU");
		  route(FROM_USER);
		}
		
		# request from freeswitch to user
		if( $Ri == $shv(lan_addr) && $Rp == $shv(lan_port_reg) ) {
			xlog("L_INFO", "<sc>: init-dialog to user, $fU to $tU");
			route(TO_USER);
		}
	
		# request trunk callin, support: sip.tls.ws.wss trunks
		if( ($Ri == $shv(wan_addr)) && 
			  ($Rp == $shv(wan_port_trunk) || $Rp == $shv(wan_tls_port_trunk) || $Rp == $shv(wan_ws_port_trunk) || $Rp == $shv(wan_wss_port_trunk) ) ) {
			xlog("L_INFO", "<sc>: init-dialog from trunk, $fU to $tU");
			route(FROM_TRUNK);
		}
		
	  # request trunk callout
	  if( $Ri == $shv(lan_addr) && $Rp == $shv(lan_port_trunk) ) {
	  	xlog("L_INFO", "<sc>: init-dialog to trunk, $fU to $tU");
			route(TO_TRUNK);
	  }
	  
		# no request route
		xlog("L_INFO", "<sc>: init-dialog no route, 404");
		send_reply("404", "Not Found");

    exit;
}

route[FROM_USER] {
		# request from user to freeswitch
		# user call user, use freeswitch to freeswitch
		#if( dp_translate("0", "$tU/$avp(dest)", "$var(attrs)") ) {
		#	xlog("L_INFO", "<sc>: user call user, dialplan lookup user $tU attrs: $var(attrs)");
		#  route(PARSE_ATTRS);
		#  
		#	$fs = "udp:" + $shv(lan_addr) + ":" + $shv(lan_port_reg); 
		#	$du = "sip:" + $var(attrs);
		#	$ru = "sip:" + $tU + "@" + $var(attrs);	
		# uac_replace_from("$fU", "sip:$fU@$shv(lan_addr):$shv(lan_port_reg)");
		#	uac_replace_to("$tU", "sip:$tU@$var(attrs)");
		#	route(RELAY);
		#}
		
		# user call pstn
		if( dp_translate("0", "$fU/$avp(dest)", "$var(attrs)") ) {
			xlog("L_INFO", "<sc>: user direct call, dialplan lookup user $fU attrs: $var(attrs)");
		  route(PARSE_ATTRS);
		  
			$fs = "udp:" + $shv(lan_addr) + ":" + $shv(lan_port_reg); 
			$du = "sip:" + $var(attrs);
			$ru = "sip:" + $tU + "@" + $var(attrs);	
		  uac_replace_from("$fU", "sip:$fU@$shv(lan_addr):$shv(lan_port_reg)");
			uac_replace_to("$tU", "sip:$tU@$var(attrs)");
			route(RELAY);
		}
}

route[TO_USER] {
		# request using midregistrar, ex: attrs = xx.xx.xx.xx:5060
		if( dp_translate("0", "$tU/$avp(dest)", "$var(attrs)") || 
		    dp_translate("0", "$rd/$avp(dest)", "$var(attrs)") ||
		    dp_translate("0", "$fd/$avp(dest)", "$var(attrs)") ) {
		  xlog("L_INFO", "<sc>: to user, dialplan lookup user $tU attrs: $var(attrs)");
		  route(PARSE_ATTRS);
		  
		  $var(tmp) = ':';
			$var(pos1) = $(var(attrs){s.index, $var(tmp)});
			$var(pos2) = $var(pos1) + 1;
		  $var(fsip)   = $(var(attrs){s.substr,0,$var(pos1)});
		  $var(fsport) = $(var(attrs){s.substr,$var(pos2),0});
		  
			if ( $si == $var(fsip) && $sp == $var(fsport) ) {   
				xlog("L_INFO", "<sc>: from freeswitch: $var(attrs), user $fU to $tU, mid-registrar looking up");
			
				if (!mid_registrar_lookup("location")) {
					t_reply("404", "Not Found");
					exit;
				} else {
					xlog("L_INFO", "<sc>: lookup mid-registrar is ok, now forwarding to user $tU, $ru");
					
					$var(touri) = "";
					if( $dd == "" || $dd == NULL ) {
						xlog("L_INFO", "<sc>: to user, $$dd is null, use $$rd $rd:$rp");
						$var(touri) = $rd + ":" + $rp;
					} else {
						$var(touri) = $dd + ":" + $dp;
					}
					
					if( isbflagset(TLS_DT) ) {          # to tls uac
						$fs = "tls:" + $shv(wan_addr) + ":" + $shv(wan_tls_port_reg);
						uac_replace_from("$fU", "sip:$fU@$shv(wan_addr_adv):$shv(wan_tls_port_reg)");
				  	uac_replace_to("$tU", "sip:$tU@$var(touri)");
				  	
					} else if( isbflagset(WS_DT) ){     # to ws uac
						$fs = "ws:" + $shv(wan_addr) + ":" + $shv(wan_ws_port_reg);
						uac_replace_from("$fU", "sip:$fU@$shv(wan_addr_adv):$shv(wan_ws_port_reg)");
				  	uac_replace_to("$tU", "sip:$tU@$var(touri)");
				  	
					} else if( isbflagset(WSS_DT) ){    # to wss uac
						$fs = "wss:" + $shv(wan_addr) + ":" + $shv(wan_wss_port_reg);
						uac_replace_from("$fU", "sip:$fU@$shv(wan_addr_adv):$shv(wan_wss_port_reg)");
				  	uac_replace_to("$tU", "sip:$tU@$var(touri)");
				  	
					} else {                            # to sip uac
						$fs = "udp:" + $shv(wan_addr) + ":" + $shv(wan_port_reg);
						uac_replace_from("$fU", "sip:$fU@$shv(wan_addr_adv):$shv(wan_port_reg)");
				  	uac_replace_to("$tU", "sip:$tU@$var(touri)");
					}
				
					route(RELAY);
				}
			} else {
			  xlog("L_INFO", "<sc>: user $fU to $tU, from freeswitch: $si:$sp to freeswitch: $var(attrs)");
			  
				$fs = "udp:" + $shv(lan_addr) + ":" + $shv(lan_port_reg); 
				$du = "sip:" + $var(attrs);
				$ru = "sip:" + $tU + "@" + $var(attrs);	
		    uac_replace_from("$fU", "sip:$fU@$shv(lan_addr):$shv(lan_port_reg)");
				uac_replace_to("$tU", "sip:$tU@$var(attrs)");
				route(RELAY);
			}
		}
}

route[FROM_TRUNK] {
		# request trunk callin: lookup by tU/fU/si 
		if( dp_translate("1", "$tU/$avp(dest)", "$var(attrs)") ||
			  dp_translate("1", "$fU/$avp(dest)", "$var(attrs)") ||
			  dp_translate("1", "$si/$avp(dest)", "$var(attrs)") ) {		
			  			  					
			xlog("L_INFO", "<sc>: callin dialplan lookup user $tU, dest:$avp(dest) attrs: $var(attrs)");
			set_dlg_profile("callin");
			setflag(CALLIN_FLAG);
		  route(PARSE_ATTRS);
		  
		  if( $avp(dest) == "" || $avp(dest) == NULL ) {
		  	$avp(dest) = $tU;
		  }
		  
		  # disp:dispatcher; lb:load balance; dr:dynamic routing
			if( $var(dsflag) == "disp" || $var(dsflag) == "lb" || $var(dsflag) == "dr" ) {      
		  	route(ADVROUTE);
			}
		  	   
		  $fs = "udp:" + $shv(lan_addr) + ":" + $shv(lan_port_trunk); 
			$du = "sip:" + $var(attrs);
			$ru = "sip:" + $avp(dest) + "@" + $var(attrs);		
			uac_replace_from("$fU", "sip:$fU@$shv(lan_addr):$shv(lan_port_trunk)");
			uac_replace_to("$avp(dest)", "sip:$avp(dest)@$var(attrs)");
			route(RELAY);
		} else {
			send_reply("404", "Not Found");
			exit;
		}
}

route[TO_TRUNK] {
		# request trunk callout: lookup by tU/fU/si
		if( dp_translate("2", "$tU/$avp(dest)", "$var(attrs)") ||
		  	dp_translate("2", "$fU/$avp(dest)", "$var(attrs)") ||
		  	dp_translate("2", "$si/$avp(dest)", "$var(attrs)") ) {	
		  					
			xlog("L_INFO", "<sc>: callout dialplan lookup user $tU, dest:$avp(dest) attrs: $var(attrs)");
			set_dlg_profile("callout");
			setflag(CALLOUT_FLAG);
		  route(PARSE_ATTRS);
		  
		  if( $avp(dest) == "" || $avp(dest) == NULL ) {
		  	$avp(dest) = $tU;
		  } 
		  
		  # disp:dispatcher; lb:load balance; dr:dynamic routing
			if( $var(dsflag) == "disp" || $var(dsflag) == "lb" || $var(dsflag) == "dr" ) {      
		  	route(ADVROUTE);
			} 
					  
			$fs = "udp:" + $shv(wan_addr) + ":" + $shv(wan_port_trunk); 
			$du = "sip:" + $var(attrs);
			$ru = "sip:" + $avp(dest) + "@" + $var(attrs);		
			uac_replace_from("$fU", "sip:$fU@$shv(wan_addr_adv):$shv(wan_port_trunk)");
			uac_replace_to("$avp(dest)", "sip:$avp(dest)@$var(attrs)");
			route(RELAY);
		} else {
			send_reply("404", "Not Found");
			exit;
		}
}

#----------------------------------------------------------------------
# advanced route: dispatch;load balance;dynamic routing
#----------------------------------------------------------------------
route[ADVROUTE] {		
		xlog("L_INFO", "<sc>: advroute $rm from $si:$sp, cid:$ci");

		# rtpengine route
		route(RTPENGINE_MANAGE);
		
		# add nat=yes;
		if (isflagset(NAT_FLAG)) {
			add_rr_param(";nat=yes");
		}
		
		if( $var(dsflag) == "disp" ) {
			# algorithm: 4-weighted round-robin (next destination)
			if( !ds_select_dst("$var(dsgrp)", "4", "FM10") ) {
				send_reply("404", "No Destination");
				exit;
			}
			xlog("L_INFO", "<sc>: dispatch dsgrp:$avp(dsgrp) dscnt:$avp(dscnt) dsuri:$du, $fU to $tU");			
		} else if( $var(dsflag) == "lb" ) {
			# resources: pstn, algorithm: s-pick a random destination 
			if( !lb_start("$(var(dsgrp){s.int})", "pstn", "s") ) {
				send_reply("404", "No Destination");
				exit;
			}
			xlog("L_INFO", "<sc>: loadbalance dsgrp:$var(dsgrp) dsuri:$du, $fU to $tU");			
		} else if( $var(dsflag) == "dr" ) {      
	  	# flag(W) sort them based on their weight
			if( !do_routing("$(var(dsgrp){s.int})", "W") ) {
				send_reply("404", "No Destination");
				exit;
			}
			xlog("L_INFO", "<sc>: drouting dsgrp:$var(dsgrp) dsuri:$ru, $fU to $tU");
		} 

		# replace from header
		# warning: can not use uac_replace_from and uac_replace_to multiple times at REQUEST_ROUTE
		if( isflagset(CALLIN_FLAG) ) {	
			$fs = "udp:" + $shv(lan_addr) + ":" + $shv(lan_port_trunk);
			uac_replace_from("$fU", "sip:$fU@$shv(lan_addr):$shv(lan_port_trunk)");
		} else if( isflagset(CALLOUT_FLAG) ) {
			$fs = "udp:" + $shv(wan_addr) + ":" + $shv(wan_port_trunk); 
			uac_replace_from("$fU", "sip:$fU@$shv(wan_addr_adv):$shv(wan_port_trunk)");
		}
	
		route(ADV_RELAY);
		exit;
}

route[ADV_RELAY] {
		# print any param
		#xlog("L_INFO", "<sc>: *** dsflag:$var(dsflag) ");
		#xlog("L_INFO", "<sc>: *** $$ru:$ru, $$rU:$rU, $$rd:$rd, $$rp:$rp");
		#xlog("L_INFO", "<sc>: *** $$du:$du ");

		# change r-uri multiple times
		if( $var(dsflag) == "disp" || $var(dsflag) == "lb"  ) {
			$ru = "sip:" + $tU + "@" + $(du{s.substr,4,0});
		} else {      
	  	# for dr, do nothing
		} 
			
		if (is_method("INVITE")) { 
			t_on_reply("ADV_REPLY");
			t_on_branch("ADV_BRANCH");
			t_on_failure("ADV_FAILURE");
		}
		
		if (!t_relay()) {
			send_reply("500","Internal Error");
		}		
		exit;
}

onreply_route[ADV_REPLY] {
		xlog("L_INFO", "<sc>: advroute reply $rs $rr from $si:$sp, $fU to $tU, cid:$ci");
		
		# rtpengine route
		if ( has_body("application/sdp") ) {
	   	setflag( REPLY_STAT_FLAG );
			route(RTPENGINE_MANAGE);
		}
				
		# check nat flag and fix nat contact
		if (isflagset(NAT_FLAG)) {
			fix_nated_contact();
		}
}

branch_route[ADV_BRANCH] {
		xlog("L_INFO", "<sc>: advroute newbranch $fU to $tU, r-uri $ru, cid:$ci");
	
		# replace to header per branch
		if( $var(dsflag) == "disp" || $var(dsflag) == "lb"  ) {
			uac_replace_to("$avp(dest)", "sip:$avp(dest)@$(du{s.substr,4,0})");
		} else {
	  	uac_replace_to("$avp(dest)", "sip:$avp(dest)@$rd:$rp");  # for dr          
		}
}

failure_route[ADV_FAILURE] {
		xlog("L_INFO", "<sc>: advroute failure from $si:$sp, $fU to $tU, r-uri $ru, cid:$ci");		
		
		if(t_was_cancelled()) {
			xlog("L_INFO", "<sc>: advroute cancelled transaction");
			exit;
		}
		
		if( t_check_status("(408)|([56][0-9][0-9])")) {
			xlog("L_INFO","<sc>: advroute got $T_reply_code error, try the next destination");
			
			if( $var(dsflag) == "disp" ) {
				ds_mark_dst("p");
				if( !ds_next_dst() ) {
					send_reply("503", "Out of gateways");
					exit;
				}
			} else if( $var(dsflag) == "lb" ) {
				lb_disable_dst();
				if( !lb_next() ) {
					send_reply("503", "Out of gateways");
					exit;
				}
			} else if( $var(dsflag) == "dr" ) {      
				dr_disable();
				if( !use_next_gw() ) {
					send_reply("503", "Out of gateways");
					exit;
				}
			} 			
			route(ADV_RELAY);
		}
}

#----------------------------------------------------------------------
# event list
#----------------------------------------------------------------------

event_route[E_UL_CONTACT_INSERT] {
		fetch_event_params("uri=$avp(uri)");
		fetch_event_params("received=$avp(received)");
		fetch_event_params("expires =$avp(expires)");
		xlog("L_INFO", "<evt>: registrar insert uri $avp(uri), expires $avp(expires)");
}

event_route[E_UL_CONTACT_DELETE] {
		fetch_event_params("uri=$avp(uri)");
		fetch_event_params("received=$avp(received)");
		fetch_event_params("expires =$avp(expires)");
		xlog("L_INFO", "<evt>: registrar delete uri $avp(uri), expires $avp(expires)");
}

event_route[E_DISPATCHER_STATUS] {
		fetch_event_params("group=$avp(group)");
		fetch_event_params("address=$avp(address)");
		fetch_event_params("status=$avp(status)");
		xlog("L_INFO", "<evt>: dispatch group $avp(group), address $avp(address), status $avp(status)");
}

event_route[E_LOAD_BALANCER_STATUS] {
		fetch_event_params("group=$avp(group)");
		fetch_event_params("uri=$avp(uri)");
		fetch_event_params("status=$avp(status)");
		xlog("L_INFO", "<evt>: loadbalance group $avp(group), uri $avp(uri), status $avp(status)");
}

event_route[E_DROUTING_STATUS] {
		fetch_event_params("partition=$avp(partition)");
		fetch_event_params("gwid=$avp(gwid)");
		fetch_event_params("address=$avp(address)");
		fetch_event_params("status=$avp(status)");
		xlog("L_INFO", "<evt>: drouting gwid $avp(gwid), address $avp(address), status $avp(status)");
}
